/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codlinha;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;

/**
 *
 * @author samot
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    int minhaPorta;
    String ipEnviar;
    int portaEnviar;
    boolean isServerSet;
    boolean isRemoteSet;

    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonLigarServidor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelServerPort = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        buttonSetDestination = new javax.swing.JButton();
        myIplabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaMsgtoSend = new javax.swing.JTextArea();
        buttonEnviarMsg = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textRcvd = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Comunicação através do 8B6T");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        buttonLigarServidor.setText("Ligar Servidor");
        buttonLigarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLigarServidorActionPerformed(evt);
            }
        });

        jLabel1.setText("Codigo de Linha 8B6T");

        jLabel2.setText("Meu ip é");

        jLabel3.setText("Minha porta");

        labelServerPort.setText("8010");
        labelServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelServerPortActionPerformed(evt);
            }
        });

        jLabel4.setText("Enviar dados para o ip");

        jTextField2.setText("192.168.25.5");

        buttonSetDestination.setText("setar");
        buttonSetDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetDestinationActionPerformed(evt);
            }
        });

        myIplabel.setText("100.100.100.100");

        jLabel6.setText("porta");

        jTextField3.setText("8010");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        textAreaMsgtoSend.setColumns(20);
        textAreaMsgtoSend.setRows(5);
        jScrollPane1.setViewportView(textAreaMsgtoSend);

        buttonEnviarMsg.setText("Enviar Mensagem");
        buttonEnviarMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnviarMsgActionPerformed(evt);
            }
        });

        textRcvd.setEditable(false);
        textRcvd.setDragEnabled(true);
        jScrollPane2.setViewportView(textRcvd);

        jLabel7.setText("                                                                       Mensagens Recebidas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonEnviarMsg)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(myIplabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(202, 202, 202)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonLigarServidor))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonSetDestination)))
                                .addGap(0, 90, Short.MAX_VALUE))
                            .addComponent(jSeparator1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(myIplabel))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(labelServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLigarServidor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSetDestination))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonEnviarMsg)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLigarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLigarServidorActionPerformed
        isServerSet = true;
        // setando minha porta
        minhaPorta = Integer.parseInt(labelServerPort.getText());
        System.out.println("Minha porta = " + minhaPorta);

        //servidor que recebe os dados
        Thread servidor = new Thread() {
            @Override
            public void run() {

                ServerSocket serverSocket = null;
                DataInputStream clientData = null;

                try {
                    //cria socket
                    serverSocket = new ServerSocket(minhaPorta);
                    System.out.println("socket servidor: " + serverSocket.toString());
                    //aceitando conexoes de clientes
                    while (true) {
                        Socket cliente = serverSocket.accept();
                        System.out.println("socket cliente recebido: " + cliente.toString());
                        String data = readAll(cliente);

                        //descodifica a mensagem
                        String msg = descodifica(data);
                        mostraDadosRecebidos(msg);
                    }

                } catch (IOException e) {
                    System.out.println(e);
                } finally {
                    try {
                        //fechando
                        serverSocket.close();
                        clientData.close();
                    } catch (IOException ex) {
                        Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                //                
            }
        };
        servidor.start();
    }//GEN-LAST:event_buttonLigarServidorActionPerformed

    private void labelServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labelServerPortActionPerformed

    private void buttonSetDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetDestinationActionPerformed
        isRemoteSet = true;
        // setando ip e porta para enviar dados
        ipEnviar = jTextField2.getText();
        portaEnviar = Integer.parseInt(jTextField3.getText());
        System.out.println("Enviar dados para " + ipEnviar + ":" + portaEnviar);
    }//GEN-LAST:event_buttonSetDestinationActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void buttonEnviarMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnviarMsgActionPerformed
        // Botao enviar mensagem
        if (isRemoteSet && isServerSet) {
            //pega o texto escrito e limpa a janela
            String msg = textAreaMsgtoSend.getText();
            textAreaMsgtoSend.setText("");

            //codifica a mensagem
            String msgC = null;
            try {
                msgC = codifica(msg);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

            //envia
            enviarMensagem(msgC);
        } else {
            System.out.println("setar servidor e destino antes de enviar mensagem!!");
        }
    }//GEN-LAST:event_buttonEnviarMsgActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //codigos executados assim que a janela aparece
        System.out.println("Janela apareceu");

        isRemoteSet = false;
        isServerSet = false;
        //mostrando meu ip
        myIplabel.setText(meuIp());

    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            //tema do sistema
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //tema estilo java
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }

    // // minhas funcoes -------------------------------------------------------
    private void enviarMensagem(String msg) {
        //
        System.out.println("Enviando para " + ipEnviar + ":" + portaEnviar + " a mensagem\n" + msg);
        //configurando o socket de envio
        Socket myClient = null;
        DataOutputStream output = null;
        try {
            myClient = new Socket(ipEnviar, portaEnviar);
            output = new DataOutputStream(myClient.getOutputStream());
            //enviando
            output.writeChars(msg);

        } catch (IOException ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                output.close();
                myClient.close();
            } catch (IOException ex) {
                Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private String meuIp() {
        //essa função retorna o ip atual dessa maquina
        String ip = "";
        try (final DatagramSocket socket = new DatagramSocket()) {
            socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
            ip = socket.getLocalAddress().getHostAddress();
        } catch (SocketException ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ip;
    }

    public String readAll(Socket socket) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append("\n");
        }
        return sb.toString().trim();
    }

    public void mostraDadosRecebidos(String dados) {
        String antigo = textRcvd.getText();
        textRcvd.setText(antigo + "\n" + dados);
    }

    public String codifica(String dado) throws UnsupportedEncodingException {
        //Mensagem dever ser transformada em binário utilizando a tabela ASCII para dar correspondência, 0,5 pt.
        System.out.println(">codificar " + dado);

        byte[] binaryData = dado.getBytes("UTF-8");

        String codificada = "";
        String emBinario = "";
        String tmp = "";
        for (byte b : binaryData) {
            //transforma tipo byte em tipo string com 0s e 1s
            tmp = Integer.toBinaryString(b);
            //adicionando padding de zeros no inicio
            while (tmp.length() < 8) {
                tmp = "0" + tmp;
            }
            emBinario += tmp;
            String codedTmp = "";
            switch (tmp) {

                // de 1 a 31, comandos
                case "00000000":
                    codedTmp = "-+00-+";
                    break;
                case "00000001":
                    codedTmp = "0-+-+0";
                    break;
                case "00000010":
                    codedTmp = "0-+0-+";
                    break;
                case "00000011":
                    codedTmp = "0-++0-";
                    break;
                case "00000100":
                    codedTmp = "-+0+0-";
                    break;
                case "00000101":
                    codedTmp = "-0--+0";
                    break;

                // de 32 a 64, simbolos
                case "00100000":    //espaco
                    codedTmp = "-++-00";
                    break;
                //letras maiusculas
                //mais simbolos
                // letras minusculas
                case "01100001":    //letra a
                    codedTmp = "+0+-00";
                    break;
                case "01100010":    //letra b
                    codedTmp = "+0+0-0";
                    break;
                case "01100011":    //letra c
                    codedTmp = "+0+00-";
                    break;
                case "01100100":    //d
                    codedTmp = "0++00-";
                    break;
                case "01100101":    //e
                    codedTmp = "++0-00";
                    break;
                case "01100110":    //f
                    codedTmp = "++00-0";
                    break;
                case "01100111":    //g
                    codedTmp = "++000-";
                    break;

                //simbolos finais
                default:
                    codedTmp = "";
            }
            codificada += codedTmp;
        }

        System.out.println(">codificada " + codificada);
        return codificada;
    }

    public String descodifica(String dado) throws UnsupportedEncodingException {
        System.out.println(">descodificar |" + dado + "|");

        String descodificada = "";

        byte byteBinary = (byte) 0b11111111;
        byte[] emBytes = null;
        ByteArrayOutputStream emBytesSteam = new ByteArrayOutputStream();

        //isso é uma regular expression que divide a string em partes de tamanho 6
        String[] partes = dado.split(String.format("(?<=\\G.{%1$d})", 12));

        for (String codedByte : partes) {

            String codedByteFixed = "";
            
            //retirando vazios da string
            for (int i = 0; i < codedByte.length(); i += 2) {
                codedByteFixed += codedByte.charAt(i);
            }

            switch (codedByteFixed) {
                // de 1 a 31, comandos
                // de 32 a 64, simbolos
                case "-++-00":   //espaco
                    byteBinary = 0b00100000;
                    break;

                //letras maiusculas
                //mais simbolos
                // letras minusculas
                case "+0+-00":   //letra a
                    byteBinary = 0b01100001;
//                    System.out.println("descodificando letra a");
                    break;
                case "+0+0-0":   //b
                    byteBinary = 0b01100010;
                    break;
                case "+0+00-":   //c
                    byteBinary = 0b01100011;
                    break;
                case "0++00-":   //d
                    byteBinary = 0b01100100;
                    break;
                case "++0-00":   //e
                    byteBinary = 0b01100101;
                    break;
                case "++00-0":   //f
                    byteBinary = 0b01100110;
                    break;
                case "++000-":   //g
                    byteBinary = 0b01100111;
                    break;
                //simbolos finais

                default:
                    byteBinary = 0b00100000;   //espaco
                    
                    ///codigos para debug abaixo
                    System.out.println("Não entendi o codigo |" + codedByteFixed + "|");
                    if (codedByteFixed.equals("+0+-00")) {
                        System.out.println("é letra a");
                    } else {
                        System.out.println(codedByteFixed + " e " + "+0+-00" + " são " + codedByteFixed.compareTo("+0+-00"));
                    }
                    System.out.print("recebido: ");
                    for (byte b : codedByteFixed.getBytes("UTF-8")) {
                        System.out.println(Integer.toBinaryString(b));
                    }
                    System.out.println("letra a : ");
                    for (byte b : "+0+-00".getBytes("UTF-8")) {
                        System.out.println(Integer.toBinaryString(b));
                    }
                    ///
            }

            emBytesSteam.write(byteBinary);

        }
        emBytes = emBytesSteam.toByteArray();
        descodificada += new String(emBytes, UTF_8);

        System.out.println(">descodificado " + descodificada);
        return descodificada;
    }

    // -- fim das minhas funcoes ----------------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEnviarMsg;
    private javax.swing.JButton buttonLigarServidor;
    private javax.swing.JButton buttonSetDestination;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField labelServerPort;
    private javax.swing.JLabel myIplabel;
    private javax.swing.JTextArea textAreaMsgtoSend;
    private javax.swing.JTextPane textRcvd;
    // End of variables declaration//GEN-END:variables

}
