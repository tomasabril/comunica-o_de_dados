/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codlinha;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;

/**
 *
 * @author samot
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    int minhaPorta;
    String ipEnviar;
    int portaEnviar;
    boolean isServerSet;
    boolean isRemoteSet;

    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonLigarServidor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelServerPort = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        buttonSetDestination = new javax.swing.JButton();
        myIplabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaMsgtoSend = new javax.swing.JTextArea();
        buttonEnviarMsg = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textRcvd = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jScrollPane3 = new javax.swing.JScrollPane();
        originalP = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        binarioP = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        codigoP = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Comunicação através do 8B6T");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        buttonLigarServidor.setText("Ligar Servidor");
        buttonLigarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLigarServidorActionPerformed(evt);
            }
        });

        jLabel1.setText("Codigo de Linha 8B6T");

        jLabel2.setText("Meu ip é");

        jLabel3.setText("Minha porta");

        labelServerPort.setText("8010");
        labelServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelServerPortActionPerformed(evt);
            }
        });

        jLabel4.setText("Enviar dados para o ip");

        jTextField2.setText("192.168.25.5");

        buttonSetDestination.setText("setar");
        buttonSetDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetDestinationActionPerformed(evt);
            }
        });

        myIplabel.setText("100.100.100.100");

        jLabel6.setText("porta");

        jTextField3.setText("8010");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        textAreaMsgtoSend.setColumns(20);
        textAreaMsgtoSend.setRows(5);
        jScrollPane1.setViewportView(textAreaMsgtoSend);

        buttonEnviarMsg.setText("Enviar Mensagem");
        buttonEnviarMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnviarMsgActionPerformed(evt);
            }
        });

        textRcvd.setEditable(false);
        textRcvd.setDragEnabled(true);
        jScrollPane2.setViewportView(textRcvd);

        jLabel7.setText("                                                                       Mensagens Recebidas");

        originalP.setColumns(20);
        originalP.setRows(5);
        jScrollPane3.setViewportView(originalP);

        binarioP.setColumns(20);
        binarioP.setRows(5);
        jScrollPane4.setViewportView(binarioP);

        codigoP.setColumns(20);
        codigoP.setRows(5);
        jScrollPane5.setViewportView(codigoP);

        jLabel5.setText("original");

        jLabel8.setText("binario");

        jLabel9.setText("código");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonEnviarMsg)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(myIplabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(202, 202, 202)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonLigarServidor))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonSetDestination)))
                                .addGap(0, 203, Short.MAX_VALUE))
                            .addComponent(jSeparator1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(myIplabel))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(labelServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLigarServidor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSetDestination))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonEnviarMsg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLigarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLigarServidorActionPerformed
        isServerSet = true;
        // setando minha porta
        minhaPorta = Integer.parseInt(labelServerPort.getText());
        System.out.println("Minha porta = " + minhaPorta);

        //servidor que recebe os dados
        Thread servidor = new Thread() {
            @Override
            public void run() {

                ServerSocket serverSocket = null;
                DataInputStream clientData = null;

                try {
                    //cria socket
                    serverSocket = new ServerSocket(minhaPorta);
                    System.out.println("socket servidor: " + serverSocket.toString());
                    //aceitando conexoes de clientes
                    while (true) {
                        Socket cliente = serverSocket.accept();
                        System.out.println("socket cliente recebido: " + cliente.toString());
                        String data = readAll(cliente);

                        //descodifica a mensagem
                        String msg = descodifica(data);
                        mostraDadosRecebidos(msg);
                    }

                } catch (IOException e) {
                    System.out.println(e);
                } finally {
                    try {
                        //fechando
                        serverSocket.close();
                        clientData.close();
                    } catch (IOException ex) {
                        Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                //                
            }
        };
        servidor.start();
    }//GEN-LAST:event_buttonLigarServidorActionPerformed

    private void labelServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labelServerPortActionPerformed

    private void buttonSetDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetDestinationActionPerformed
        isRemoteSet = true;
        // setando ip e porta para enviar dados
        ipEnviar = jTextField2.getText();
        portaEnviar = Integer.parseInt(jTextField3.getText());
        System.out.println("Enviar dados para " + ipEnviar + ":" + portaEnviar);
    }//GEN-LAST:event_buttonSetDestinationActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void buttonEnviarMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnviarMsgActionPerformed
        // Botao enviar mensagem
        if (isRemoteSet && isServerSet) {
            //pega o texto escrito e limpa a janela
            String msg = textAreaMsgtoSend.getText();
            textAreaMsgtoSend.setText("");

            //codifica a mensagem
            String msgC = null;
            try {
                msgC = codifica(msg);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

            //envia
            enviarMensagem(msgC);
        } else {
            System.out.println("setar servidor e destino antes de enviar mensagem!!");
        }
    }//GEN-LAST:event_buttonEnviarMsgActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //codigos executados assim que a janela aparece
        System.out.println("Janela apareceu");

        isRemoteSet = false;
        isServerSet = false;
        //mostrando meu ip
        myIplabel.setText(meuIp());

    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            //tema do sistema
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //tema estilo java
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }

    // // minhas funcoes -------------------------------------------------------
    private void enviarMensagem(String msg) {
        //
        System.out.println("Enviando para " + ipEnviar + ":" + portaEnviar + " a mensagem\n" + msg);
        //configurando o socket de envio
        Socket myClient = null;
        DataOutputStream output = null;
        try {
            myClient = new Socket(ipEnviar, portaEnviar);
            output = new DataOutputStream(myClient.getOutputStream());
            //enviando
            output.writeChars(msg);

        } catch (IOException ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                output.close();
                myClient.close();
            } catch (IOException ex) {
                Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private String meuIp() {
        //essa função retorna o ip atual dessa maquina
        String ip = "";
        try (final DatagramSocket socket = new DatagramSocket()) {
            socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
            ip = socket.getLocalAddress().getHostAddress();
        } catch (SocketException ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ip;
    }

    public String readAll(Socket socket) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append("\n");
        }
        return sb.toString().trim();
    }

    public void mostraDadosRecebidos(String dados) {
        String antigo = textRcvd.getText();
        textRcvd.setText(antigo + "\n" + dados);
    }

    public String codifica(String dado) throws UnsupportedEncodingException {
        //Mensagem dever ser transformada em binário utilizando a tabela ASCII para dar correspondência, 0,5 pt.
        System.out.println(">codificar " + dado);

        byte[] binaryData = dado.getBytes("cp437");
        String bin = "";
        for (byte b : binaryData) {
            String b2 = Integer.toBinaryString(b);
            if (b2.length() > 9) {
                b2 = b2.substring(24);
            }
            bin = bin + b2;
        }
        originalP.setText(dado);
        binarioP.setText(bin);

        String codificada = "";
        String emBinario = "";
        String tmp = "";
        for (byte b : binaryData) {
            //transforma tipo byte em tipo string com 0s e 1s
            tmp = Integer.toBinaryString(b);
            //adicionando padding de zeros no inicio
            while (tmp.length() < 8) {
                tmp = "0" + tmp;
            }
            if (tmp.length() > 9) {
                tmp = tmp.substring(24);
            }
            emBinario += tmp;
            String codedTmp = "";
            switch (tmp) {

                // de 1 a 31, comandos
                case "00000000": //NUL
                    codedTmp = "-+00-+";
                    break;
                case "00000001": //SOH
                    codedTmp = "0-+-+0";
                    break;
                case "00000010": //STX
                    codedTmp = "0-+0-+";
                    break;
                case "00000011": //ETX
                    codedTmp = "0-++0-";
                    break;
                case "00000100": //EOT
                    codedTmp = "-+0+0-";
                    break;
                case "00000101": //ENQ
                    codedTmp = "+0--+0";
                    break;
                case "00000110": //ACK
                    codedTmp = "+0-0-+";
                    break;
                case "00000111": //BEL
                    codedTmp = "+0-+0-";
                    break;
                case "00001000": //BS
                    codedTmp = "-+00+-";
                    break;
                case "00001001": //HT
                    codedTmp = "0-++-0";
                    break;
                case "00001010": //LF
                    codedTmp = "0-+0+-";
                    break;
                case "00001011": //VT
                    codedTmp = "0-+-0+";
                    break;
                case "00001100": //FF
                    codedTmp = "-+0-0+";
                    break;
                case "00001101": //CR
                    codedTmp = "+0-+-0";
                    break;
                case "00001110": //SO
                    codedTmp = "+0-0+-";
                    break;
                case "00001111": //SI
                    codedTmp = "+0--0+";
                    break;
                case "00010000": //DLE
                    codedTmp = "0--+0+";
                    break;
                case "00010001": //DC1
                    codedTmp = "-0-0++";
                    break;
                case "00010010": //DC2
                    codedTmp = "-0-+0+";
                    break;
                case "00010011": //DC3
                    codedTmp = "-0-++0";
                    break;
                case "00010100": //DC4
                    codedTmp = "0--++0";
                    break;
                case "00010101": //NAK
                    codedTmp = "--00++";
                    break;
                case "00010110": //SYN
                    codedTmp = "--0+0+";
                    break;
                case "00010111": //ETB
                    codedTmp = "--0++0";
                    break;
                case "00011000": //CAN
                    codedTmp = "-+0-+0";
                    break;
                case "00011001": //EM
                    codedTmp = "+-0-+0";
                    break;
                case "00011010": //SUB
                    codedTmp = "-++-+0";
                    break;
                case "00011011": //ESC
                    codedTmp = "+00-+0";
                    break;
                case "00011100": //FS
                    codedTmp = "+00+-0";
                    break;
                case "00011101": //GS
                    codedTmp = "-+++-0";
                    break;
                case "00011110": //RS
                    codedTmp = "+-0+-0";
                    break;
                case "00011111": //US
                    codedTmp = "-+0+-0";
                    break;

                // de 32 a 64, simbolos
                case "00100000": //space
                    codedTmp = "-++-00";
                    break;
                case "00100001": //!
                    codedTmp = "+00+--";
                    break;
                case "00100010": //"
                    codedTmp = "-+0-++";
                    break;
                case "00100011": //#
                    codedTmp = "+-0-++";
                    break;
                case "00100100": //$
                    codedTmp = "+-0+00";
                    break;
                case "00100101": //%
                    codedTmp = "-+0+00";
                    break;
                case "00100110": //&
                    codedTmp = "+00-00";
                    break;
                case "00100111": //'
                    codedTmp = "-+++--";
                    break;
                case "00101000": //(
                    codedTmp = "0++-0-";
                    break;
                case "00101001": //)
                    codedTmp = "+0+0--";
                    break;
                case "00101010": //*
                    codedTmp = "+0+-0-";
                    break;
                case "00101011": //+
                    codedTmp = "+0+--0";
                    break;
                case "00101100": //`
                    codedTmp = "0++--0";
                    break;
                case "00101101": //-
                    codedTmp = "++00--";
                    break;
                case "00101110": //.
                    codedTmp = "++0-0-";
                    break;
                case "00101111": // /
                    codedTmp = "++0--0";
                    break;
                case "00110000": //0
                    codedTmp = "+-00-+";
                    break;
                case "00110001": //1
                    codedTmp = "0+--+0";
                    break;
                case "00110010": //2
                    codedTmp = "0+-0-+";
                    break;
                case "00110011": //3
                    codedTmp = "0+-+0-";
                    break;
                case "00110100": //4
                    codedTmp = "+-0+0-";
                    break;
                case "00110101": //5
                    codedTmp = "-0+-+0";
                    break;
                case "00110110": //6
                    codedTmp = "-0+-+";
                    break;
                case "00110111": //7
                    codedTmp = "-0++0-";
                    break;
                case "00111000": //8
                    codedTmp = "+-00+-";
                    break;
                case "00111001": //9
                    codedTmp = "0+-+-0";
                    break;
                case "00111010": //:
                    codedTmp = "0+-0+-";
                    break;
                case "00111011": //;
                    codedTmp = "0+--0+";
                    break;
                case "00111100": //<
                    codedTmp = "+-0-0+";
                    break;
                case "00111101": //=
                    codedTmp = "-0++-0";
                    break;
                case "00111110": //>
                    codedTmp = "-0+0+-";
                    break;
                case "00111111": //?
                    codedTmp = "-0+-0+";
                    break;
                case "01000000": //@
                    codedTmp = "-00+0+";
                    break;
                // de 65 a 90, letras maiusculas
                case "01000001": //A
                    codedTmp = "0-00++";
                    break;
                case "01000010": //B
                    codedTmp = "0-0+0+";
                    break;
                case "01000011": //C
                    codedTmp = "0-0++0";
                    break;
                case "01000100": //D
                    codedTmp = "-00++0";
                    break;
                case "01000101": //E
                    codedTmp = "00-0++";
                    break;
                case "01000110": //F
                    codedTmp = "00-+0+";
                    break;
                case "01000111": //G
                    codedTmp = "00-++0";
                    break;
                case "01001000": //H
                    codedTmp = "00+000";
                    break;
                case "01001001": //I
                    codedTmp = "++-000";
                    break;
                case "01001010": //J
                    codedTmp = "+-+000";
                    break;
                case "01001011": //K
                    codedTmp = "-++000";
                    break;
                case "01001100": //L
                    codedTmp = "0+-000";
                    break;
                case "01001101": //M
                    codedTmp = "+0-000";
                    break;
                case "01001110": //N
                    codedTmp = "0-+000";
                    break;
                case "01001111": //O
                    codedTmp = "-0+000";
                    break;
                case "01010000": //P
                    codedTmp = "+--+0+";
                    break;
                case "01010001": //Q
                    codedTmp = "-+-0++";
                    break;
                case "01010010": //R
                    codedTmp = "-+-+0+";
                    break;
                case "01010011": //S
                    codedTmp = "-+-++0";
                    break;
                case "01010100": //T
                    codedTmp = "+--++0";
                    break;
                case "01010101": //U
                    codedTmp = "--+0++";
                    break;
                case "01010110": //V
                    codedTmp = "--++0+";
                    break;
                case "01010111": //W
                    codedTmp = "--+++0";
                    break;
                case "01011000": //X
                    codedTmp = "--0+++";
                    break;
                case "01011001": //Y
                    codedTmp = "-0-+++";
                    break;
                case "01011010": //Z
                    codedTmp = "0--+++";
                    break;
                // de 91 a 96, mais simbolos
                case "01011011": //[
                    codedTmp = "0--0++";
                    break;
                case "01011100": //\
                    codedTmp = "+--0++";
                    break;
                case "01011101": //]
                    codedTmp = "-000++";
                    break;
                case "01011110": //^
                    codedTmp = "0+++--";
                    break;
                case "01011111": //_
                    codedTmp = "0++-00";
                    break;
                case "01100000": //`
                    codedTmp = "0++0-0";
                    break;
                // de 97 a 122, letras minusculas
                case "01100001": //a
                    codedTmp = "+0+-00";
                    break;
                case "01100010": //b
                    codedTmp = "+0+0-0";
                    break;
                case "01100011": //c
                    codedTmp = "+0+00-";
                    break;
                case "01100100": //d
                    codedTmp = "0++00-";
                    break;
                case "01100101": //e
                    codedTmp = "++0-00";
                    break;
                case "01100110": //f
                    codedTmp = "++00-0";
                    break;
                case "01100111": //g
                    codedTmp = "++000-";
                    break;
                case "01101000": //h
                    codedTmp = "0++-+-";
                    break;
                case "01101001": //i
                    codedTmp = "+0++--";
                    break;
                case "01101010": //j
                    codedTmp = "+0+-+-";
                    break;
                case "01101011": //k
                    codedTmp = "+0+--+";
                    break;
                case "01101100": //l
                    codedTmp = "0++--+";
                    break;
                case "01101101": //m
                    codedTmp = "++0+--";
                    break;
                case "01101110": //n
                    codedTmp = "++0-+-";
                    break;
                case "01101111": //o
                    codedTmp = "++0--+";
                    break;
                case "01110000": //p
                    codedTmp = "000++-";
                    break;
                case "01110001": //q
                    codedTmp = "000+-+";
                    break;
                case "01110010": //r
                    codedTmp = "000-++";
                    break;
                case "01110011": //s
                    codedTmp = "000+00";
                    break;
                case "01110100": //t
                    codedTmp = "000+0-";
                    break;
                case "01110101": //u
                    codedTmp = "000+-0";
                    break;
                case "01110110": //v
                    codedTmp = "000-0+";
                    break;
                case "01110111": //w
                    codedTmp = "000-+0";
                    break;
                case "01111000": //x
                    codedTmp = "+++--0";
                    break;
                case "01111001": //y
                    codedTmp = "+++-0-";
                    break;
                case "01111010": //z
                    codedTmp = "+++0--";
                    break;

                // de 123 a 127, simbolos finais
                case "01111011": //{
                    codedTmp = "0++0--";
                    break;
                case "01111100": //|
                    codedTmp = "-00-++";
                    break;
                case "01111101": //}
                    codedTmp = "-00+00";
                    break;
                case "01111110": //~
                    codedTmp = "+---++";
                    break;
                case "01111111": //DEL
                    codedTmp = "+--+00";
                    break;

                //demais: tabela estendida
                case "10000000":
                    codedTmp = "-00+-+";
                    break;
                case "10000001":
                    codedTmp = "0-0-++";
                    break;
                case "10000010":
                    codedTmp = "0-0+-+";
                    break;
                case "10000011":
                    codedTmp = "0-0++-";
                    break;
                case "10000100":
                    codedTmp = "-00++-";
                    break;
                case "10000101":
                    codedTmp = "00--++";
                    break;
                case "10000110":
                    codedTmp = "00-+-+";
                    break;
                case "10000111":
                    codedTmp = "00-++-";
                    break;
                case "10001000":
                    codedTmp = "-000+0";
                    break;
                case "10001001":
                    codedTmp = "0-0+00";
                    break;
                case "10001010":
                    codedTmp = "0-00+0";
                    break;
                case "10001011":
                    codedTmp = "0-000+";
                    break;
                case "10001100":
                    codedTmp = "-0000+";
                    break;
                case "10001101":
                    codedTmp = "00-+00";
                    break;
                case "10001110":
                    codedTmp = "00-0+0";
                    break;
                case "10001111":
                    codedTmp = "00-00+";
                    break;
                case "10010000":
                    codedTmp = "+--+-+";
                    break;
                case "10010001":
                    codedTmp = "-+--++";
                    break;
                case "10010010":
                    codedTmp = "-+-+-+";
                    break;
                case "10010011":
                    codedTmp = "-+-++-";
                    break;
                case "10010100":
                    codedTmp = "+--++-";
                    break;
                case "10010101":
                    codedTmp = "--+-++";
                    break;
                case "10010110":
                    codedTmp = "--++-+";
                    break;
                case "10010111":
                    codedTmp = "--+++-";
                    break;
                case "10011000":
                    codedTmp = "+--0+0";
                    break;
                case "10011001":
                    codedTmp = "-+-+00";
                    break;
                case "10011010":
                    codedTmp = "-+-0+0";
                    break;
                case "10011011":
                    codedTmp = "-+-00+";
                    break;
                case "10011100":
                    codedTmp = "+--00+";
                    break;
                case "10011101":
                    codedTmp = "--++00";
                    break;
                case "10011110":
                    codedTmp = "--+0+0";
                    break;
                case "10011111":
                    codedTmp = "--+00+";
                    break;
                case "10100000":
                    codedTmp = "-++0-0";
                    break;
                case "10100001":
                    codedTmp = "+-+-00";
                    break;
                case "10100010":
                    codedTmp = "+-+0-0";
                    break;
                case "10100011":
                    codedTmp = "+-+00-";
                    break;
                case "10100100":
                    codedTmp = "-++00-";
                    break;
                case "10100101":
                    codedTmp = "++--00";
                    break;
                case "10100110":
                    codedTmp = "++-0-0";
                    break;
                case "10100111":
                    codedTmp = "++-00-";
                    break;
                case "10101000":
                    codedTmp = "-++-+-";
                    break;
                case "10101001":
                    codedTmp = "+-++--";
                    break;
                case "10101010":
                    codedTmp = "+-+-+-";
                    break;
                case "10101011":
                    codedTmp = "+-+--+";
                    break;
                case "10101100":
                    codedTmp = "-++--+";
                    break;
                case "10101101":
                    codedTmp = "++-+--";
                    break;
                case "10101110":
                    codedTmp = "++--+-";
                    break;
                case "10101111":
                    codedTmp = "++---+";
                    break;

                case "10110000":
                    codedTmp = "+000-0";
                    break;
                case "10110001":
                    codedTmp = "0+0-00";
                    break;
                case "10110010":
                    codedTmp = "0+00-0";
                    break;
                case "10110011":
                    codedTmp = "0+000-";
                    break;
                case "10110100":
                    codedTmp = "-0000-";
                    break;
                case "10110101":
                    codedTmp = "00+-00";
                    break;
                case "10110110":
                    codedTmp = "00+0-0";
                    break;
                case "10110111":
                    codedTmp = "00+00-";
                    break;
                case "10111000":
                    codedTmp = "+00-+-";
                    break;
                case "10111001":
                    codedTmp = "0+0+--";
                    break;
                case "10111010":
                    codedTmp = "0+0-+-";
                    break;
                case "10111011":
                    codedTmp = "0+0--+";
                    break;
                case "10111100":
                    codedTmp = "+00--+";
                    break;
                case "10111101":
                    codedTmp = "00++--";
                    break;
                case "10111110":
                    codedTmp = "00+-+-";
                    break;
                case "10111111":
                    codedTmp = "00+--+";
                    break;

                case "11000000":
                    codedTmp = "-+0+-+";
                    break;
                case "11000001":
                    codedTmp = "0-+-++";
                    break;
                case "11000010":
                    codedTmp = "0-++-+";
                    break;
                case "11000011":
                    codedTmp = "0-+++-";
                    break;
                case "11000100":
                    codedTmp = "-+0++-";
                    break;
                case "11000101":
                    codedTmp = "+0--++";
                    break;
                case "11000110":
                    codedTmp = "+0-+-+";
                    break;
                case "11000111":
                    codedTmp = "+0-++-";
                    break;
                case "11001000":
                    codedTmp = "-+00+0";
                    break;
                case "11001001":
                    codedTmp = "0-++00";
                    break;
                case "11001010":
                    codedTmp = "0-+0+0";
                    break;
                case "11001011":
                    codedTmp = "0-+00+";
                    break;
                case "11001100":
                    codedTmp = "-+000+";
                    break;
                case "11001101":
                    codedTmp = "+0-+00";
                    break;
                case "11001110":
                    codedTmp = "+0-0+0";
                    break;
                case "11001111":
                    codedTmp = "+0-00+";
                    break;

                case "11010000":
                    codedTmp = "+-0+-+";
                    break;
                case "11010001":
                    codedTmp = "0+--++";
                    break;
                case "11010010":
                    codedTmp = "0+-+-+";
                    break;
                case "11010011":
                    codedTmp = "0+-++-";
                    break;
                case "11010100":
                    codedTmp = "+-0++-";
                    break;
                case "11010101":
                    codedTmp = "-0+-++";
                    break;
                case "11010110":
                    codedTmp = "-0++-+";
                    break;
                case "11010111":
                    codedTmp = "-0+++-";
                    break;
                case "11011000":
                    codedTmp = "+-00+0";
                    break;
                case "11011001":
                    codedTmp = "0+-+00";
                    break;
                case "11011010":
                    codedTmp = "0+-0+0";
                    break;
                case "11011011":
                    codedTmp = "0+-00+";
                    break;
                case "11011100":
                    codedTmp = "+-000+";
                    break;
                case "11011101":
                    codedTmp = "-0++00";
                    break;
                case "11011110":
                    codedTmp = "-0+0+0";
                    break;
                case "11011111":
                    codedTmp = "-0+00+";
                    break;

                case "11100000":
                    codedTmp = "-++0-+";
                    break;
                case "11100001":
                    codedTmp = "+--++0";
                    break;
                case "11100010":
                    codedTmp = "+-+0-+";
                    break;
                case "11100011":
                    codedTmp = "+-++0-";
                    break;
                case "11100100":
                    codedTmp = "-+++0-";
                    break;
                case "11100101":
                    codedTmp = "++--+0";
                    break;
                case "11100110":
                    codedTmp = "++-0-+";
                    break;
                case "11100111":
                    codedTmp = "++-+0-";
                    break;
                case "11101000":
                    codedTmp = "-++0+-";
                    break;
                case "11101001":
                    codedTmp = "+-++-0";
                    break;
                case "11101010":
                    codedTmp = "+-+0+-";
                    break;
                case "11101011":
                    codedTmp = "+-+-0+";
                    break;
                case "11101100":
                    codedTmp = "-++-0+";
                    break;
                case "11101101":
                    codedTmp = "++-+-0";
                    break;
                case "11101110":
                    codedTmp = "++-0+-";
                    break;
                case "11101111":
                    codedTmp = "++--0+";
                    break;

                case "11110000":
                    codedTmp = "+000-+";
                    break;
                case "11110001":
                    codedTmp = "0+0-+0";
                    break;
                case "11110010":
                    codedTmp = "0+00-+";
                    break;
                case "11110011":
                    codedTmp = "0+0+0-";
                    break;
                case "11110100":
                    codedTmp = "+00+0-";
                    break;
                case "11110101":
                    codedTmp = "00+-+0";
                    break;
                case "11110110":
                    codedTmp = "00+0-+";
                    break;
                case "11110111":
                    codedTmp = "00++0-";
                    break;
                case "11111000":
                    codedTmp = "+000+-";
                    break;
                case "11111001":
                    codedTmp = "0+0+-0";
                    break;
                case "11111010":
                    codedTmp = "0+00+-";
                    break;
                case "11111011":
                    codedTmp = "0+0-0+";
                    break;
                case "11111100":
                    codedTmp = "+00-0+";
                    break;
                case "11111101":
                    codedTmp = "00++-0";
                    break;
                case "11111110":
                    codedTmp = "00+0+-";
                    break;
                case "11111111":
                    codedTmp = "00+-0+";
                    break;

                default:
                    codedTmp = "";
            }
            codificada += codedTmp;
        }

        System.out.println(">codificada " + codificada);
        codigoP.setText(codificada);
        return codificada;
    }

    public String descodifica(String dado) throws UnsupportedEncodingException {
        System.out.println(">descodificar |" + dado + "|");

        String descodificada = "";
        codigoP.setText(dado);

        byte byteBinary = (byte) 0b11111111;
        byte[] emBytes = null;
        ByteArrayOutputStream emBytesSteam = new ByteArrayOutputStream();

        //isso é uma regular expression que divide a string em partes de tamanho 6
        String[] partes = dado.split(String.format("(?<=\\G.{%1$d})", 12));

        for (String codedByte : partes) {

            String codedByteFixed = "";

            //retirando vazios da string
            for (int i = 0; i < codedByte.length(); i += 2) {
                codedByteFixed += codedByte.charAt(i);
            }

            switch (codedByteFixed) {
                // de 1 a 31, comandos
                case "-+00-+": //NUL
                    byteBinary = 0b00000000;
                    break;
                case "0-+-+0": //SOH
                    byteBinary = 0b00000001;
                    break;
                case "0-+0-+": //STX
                    byteBinary = 0b00000010;
                    break;
                case "0-++0-": //ETX
                    byteBinary = 0b00000011;
                    break;
                case "-+0+0-": //EOT
                    byteBinary = 0b00000100;
                    break;
                case "+0--+0": //ENQ
                    byteBinary = 0b00000101;
                    break;
                case "+0-0-+": //ACK
                    byteBinary = 0b00000110;
                    break;
                case "+0-+0-": //BEL
                    byteBinary = 0b00000111;
                    break;
                case "-+00+-": //BS
                    byteBinary = 0b00001000;
                    break;
                case "0-++-0": //HT
                    byteBinary = 0b00001001;
                    break;
                case "0-+0+-": //LF
                    byteBinary = 0b00001010;
                    break;
                case "0-+-0+": //VT
                    byteBinary = 0b00001011;
                    break;
                case "-+0-0+": //FF
                    byteBinary = 0b00001100;
                    break;
                case "+0-+-0": //CR
                    byteBinary = 0b00001101;
                    break;
                case "+0-0+-": //SO
                    byteBinary = 0b00001110;
                    break;
                case "+0--0+": //SI
                    byteBinary = 0b00001111;
                    break;
                case "0--+0+": //DLE
                    byteBinary = 0b00010000;
                    break;
                case "-0-0++": //DC1
                    byteBinary = 0b00010001;
                    break;
                case "-0-+0+": //DC2
                    byteBinary = 0b00010010;
                    break;
                case "-0-++0": //DC3
                    byteBinary = 0b00010011;
                    break;
                case "0--++0": //DC4
                    byteBinary = 0b00010100;
                    break;
                case "--00++": //NAK
                    byteBinary = 0b00010101;
                    break;
                case "--0+0+": //SYN
                    byteBinary = 0b00010110;
                    break;
                case "--0++0": //ETB
                    byteBinary = 0b00010111;
                    break;
                case "-+0-+0": //CAN
                    byteBinary = 0b00011000;
                    break;
                case "+-0-+0": //EM
                    byteBinary = 0b00011001;
                    break;
                case "-++-+0": //SUB
                    byteBinary = 0b00011010;
                    break;
                case "+00-+0": //ESC
                    byteBinary = 0b00011011;
                    break;
                case "+00+-0": //FS
                    byteBinary = 0b00011100;
                    break;
                case "-+++-0": //GS
                    byteBinary = 0b00011101;
                    break;
                case "+-0+-0": //RS
                    byteBinary = 0b00011110;
                    break;
                case "-+0+-0": //US
                    byteBinary = 0b00011111;
                    break;

                // de 32 a 64, simbolos
                case "-++-00": //space
                    byteBinary = 0b00100000;
                    break;
                case "+00+--": //!
                    byteBinary = 0b00100001;
                    break;
                case "-+0-++": //"
                    byteBinary = 0b00100010;
                    break;
                case "+-0-++": //#
                    byteBinary = 0b00100011;
                    break;
                case "+-0+00": //$
                    byteBinary = 0b00100100;
                    break;
                case "-+0+00": //%
                    byteBinary = 0b00100101;
                    break;
                case "+00-00": //&
                    byteBinary = 0b00100110;
                    break;
                case "-+++--": //'
                    byteBinary = 0b00100111;
                    break;
                case "0++-0-": //(
                    byteBinary = 0b00101000;
                    break;
                case "+0+0--": //)
                    byteBinary = 0b00101001;
                    break;
                case "+0+-0-": //*
                    byteBinary = 0b00101010;
                    break;
                case "+0+--0": //+
                    byteBinary = 0b00101011;
                    break;
                case "0++--0": //`
                    byteBinary = 0b00101100;
                    break;
                case "++00--": //-
                    byteBinary = 0b00101101;
                    break;
                case "++0-0-": //.
                    byteBinary = 0b00101110;
                    break;
                case "++0--0": // /
                    byteBinary = 0b00101111;
                    break;
                case "+-00-+": //0
                    byteBinary = 0b00110000;
                    break;
                case "0+--+0": //1
                    byteBinary = 0b00110001;
                    break;
                case "0+-0-+": //2
                    byteBinary = 0b00110010;
                    break;
                case "0+-+0-": //3
                    byteBinary = 0b00110011;
                    break;
                case "+-0+0-": //4
                    byteBinary = 0b00110100;
                    break;
                case "-0+-+0": //5
                    byteBinary = 0b00110101;
                    break;
                case "-0+-+": //6
                    byteBinary = 0b00110110;
                    break;
                case "-0++0-": //7
                    byteBinary = 0b00110111;
                    break;
                case "+-00+-": //8
                    byteBinary = 0b00111000;
                    break;
                case "0+-+-0": //9
                    byteBinary = 0b00111001;
                    break;
                case "0+-0+-": //:
                    byteBinary = 0b00111010;
                    break;
                case "0+--0+": //;
                    byteBinary = 0b00111011;
                    break;
                case "+-0-0+": //<
                    byteBinary = 0b00111100;
                    break;
                case "-0++-0": //=
                    byteBinary = 0b00111101;
                    break;
                case "-0+0+-": //>
                    byteBinary = 0b00111110;
                    break;
                case "-0+-0+": //?
                    byteBinary = 0b00111111;
                    break;
                case "-00+0+": //@
                    byteBinary = 0b01000000;
                    break;

                //letras maiusculas
                case "0-00++": //A
                    byteBinary = 0b01000001;
                    break;
                case "0-0+0+": //B
                    byteBinary = 0b01000010;
                    break;
                case "0-0++0": //C
                    byteBinary = 0b01000011;
                    break;
                case "-00++0": //D
                    byteBinary = 0b01000100;
                    break;
                case "00-0++": //E
                    byteBinary = 0b01000101;
                    break;
                case "00-+0+": //F
                    byteBinary = 0b01000110;
                    break;
                case "00-++0": //G
                    byteBinary = 0b01000111;
                    break;
                case "00+000": //H
                    byteBinary = 0b01001000;
                    break;
                case "++-000": //I
                    byteBinary = 0b01001001;
                    break;
                case "+-+000": //J
                    byteBinary = 0b01001010;
                    break;
                case "-++000": //K
                    byteBinary = 0b01001011;
                    break;
                case "0+-000": //L
                    byteBinary = 0b01001100;
                    break;
                case "+0-000": //M
                    byteBinary = 0b01001101;
                    break;
                case "0-+000": //N
                    byteBinary = 0b01001110;
                    break;
                case "-0+000": //O
                    byteBinary = 0b01001111;
                    break;
                case "+--+0+": //P
                    byteBinary = 0b01010000;
                    break;
                case "-+-0++": //Q
                    byteBinary = 0b01010001;
                    break;
                case "-+-+0+": //R
                    byteBinary = 0b01010010;
                    break;
                case "-+-++0": //S
                    byteBinary = 0b01010011;
                    break;
                case "+--++0": //T
                    byteBinary = 0b01010100;
                    break;
                case "--+0++": //U
                    byteBinary = 0b01010101;
                    break;
                case "--++0+": //V
                    byteBinary = 0b01010110;
                    break;
                case "--+++0": //W
                    byteBinary = 0b01010111;
                    break;
                case "--0+++": //X
                    byteBinary = 0b01011000;
                    break;
                case "-0-+++": //Y
                    byteBinary = 0b01011001;
                    break;
                case "0--+++": //Z
                    byteBinary = 0b01011010;
                    break;

                //mais simbolos
                case "0--0++": //[
                    byteBinary = 0b01011011;
                    break;
                case "+--0++": //\
                    byteBinary = 0b01011100;
                    break;
                case "-000++": //]
                    byteBinary = 0b01011101;
                    break;
                case "0+++--": //^
                    byteBinary = 0b01011110;
                    break;
                case "0++-00": //_
                    byteBinary = 0b01011111;
                    break;
                case "0++0-0": //`
                    byteBinary = 0b01100000;
                    break;

                // letras minusculas
                case "+0+-00": //a
                    byteBinary = 0b01100001;
                    break;
                case "+0+0-0": //b
                    byteBinary = 0b01100010;
                    break;
                case "+0+00-": //c
                    byteBinary = 0b01100011;
                    break;
                case "0++00-": //d
                    byteBinary = 0b01100100;
                    break;
                case "++0-00": //e
                    byteBinary = 0b01100101;
                    break;
                case "++00-0": //f
                    byteBinary = 0b01100110;
                    break;
                case "++000-": //g
                    byteBinary = 0b01100111;
                    break;
                case "0++-+-": //h
                    byteBinary = 0b01101000;
                    break;
                case "+0++--": //i
                    byteBinary = 0b01101001;
                    break;
                case "+0+-+-": //j
                    byteBinary = 0b01101010;
                    break;
                case "+0+--+": //k
                    byteBinary = 0b01101011;
                    break;
                case "0++--+": //l
                    byteBinary = 0b01101100;
                    break;
                case "++0+--": //m
                    byteBinary = 0b01101101;
                    break;
                case "++0-+-": //n
                    byteBinary = 0b01101110;
                    break;
                case "++0--+": //o
                    byteBinary = 0b01101111;
                    break;
                case "000++-": //p
                    byteBinary = 0b01110000;
                    break;
                case "000+-+": //q
                    byteBinary = 0b01110001;
                    break;
                case "000-++": //r
                    byteBinary = 0b01110010;
                    break;
                case "000+00": //s
                    byteBinary = 0b01110011;
                    break;
                case "000+0-": //t
                    byteBinary = 0b01110100;
                    break;
                case "000+-0": //u
                    byteBinary = 0b01110101;
                    break;
                case "000-0+": //v
                    byteBinary = 0b01110110;
                    break;
                case "000-+0": //w
                    byteBinary = 0b01110111;
                    break;
                case "+++--0": //x
                    byteBinary = 0b01111000;
                    break;
                case "+++-0-": //y
                    byteBinary = 0b01111001;
                    break;
                case "+++0--": //z
                    byteBinary = 0b01111010;
                    break;

                //simbolos finais
                case "0++0--": //{
                    byteBinary = 0b01111011;
                    break;
                case "-00-++": //|
                    byteBinary = 0b01111100;
                    break;
                case "-00+00": //}
                    byteBinary = 0b01111101;
                    break;
                case "+---++": //~
                    byteBinary = 0b01111110;
                    break;
                case "+--+00": //DEL
                    byteBinary = 0b01111111;
                    break;

                //tabela estendida
                case "-00+-+":
                    byteBinary = (byte) 0b10000000;
                    break;
                case "0-0-++":
                    byteBinary = (byte) 0b10000001;
                    break;
                case "0-0+-+":
                    byteBinary = (byte) 0b10000010;
                    break;
                case "0-0++-":
                    byteBinary = (byte) 0b10000011;
                    break;
                case "-00++-":
                    byteBinary = (byte) 0b10000100;
                    break;
                case "00--++":
                    byteBinary = (byte) 0b10000101;
                    break;
                case "00-+-+":
                    byteBinary = (byte) 0b10000110;
                    break;
                case "00-++-":
                    byteBinary = (byte) 0b10000111;
                    break;
                case "-000+0":
                    byteBinary = (byte) 0b10001000;
                    break;
                case "0-0+00":
                    byteBinary = (byte) 0b10001001;
                    break;
                case "0-00+0":
                    byteBinary = (byte) 0b10001010;
                    break;
                case "0-000+":
                    byteBinary = (byte) 0b10001011;
                    break;
                case "-0000+":
                    byteBinary = (byte) 0b10001100;
                    break;
                case "00-+00":
                    byteBinary = (byte) 0b10001101;
                    break;
                case "00-0+0":
                    byteBinary = (byte) 0b10001110;
                    break;
                case "00-00+":
                    byteBinary = (byte) 0b10001111;
                    break;
                case "+--+-+":
                    byteBinary = (byte) 0b10010000;
                    break;
                case "-+--++":
                    byteBinary = (byte) 0b10010001;
                    break;
                case "-+-+-+":
                    byteBinary = (byte) 0b10010010;
                    break;
                case "-+-++-":
                    byteBinary = (byte) 0b10010011;
                    break;
                case "+--++-":
                    byteBinary = (byte) 0b10010100;
                    break;
                case "--+-++":
                    byteBinary = (byte) 0b10010101;
                    break;
                case "--++-+":
                    byteBinary = (byte) 0b10010110;
                    break;
                case "--+++-":
                    byteBinary = (byte) 0b10010111;
                    break;
                case "+--0+0":
                    byteBinary = (byte) 0b10011000;
                    break;
                case "-+-+00":
                    byteBinary = (byte) 0b10011001;
                    break;
                case "-+-0+0":
                    byteBinary = (byte) 0b10011010;
                    break;
                case "-+-00+":
                    byteBinary = (byte) 0b10011011;
                    break;
                case "+--00+":
                    byteBinary = (byte) 0b10011100;
                    break;
                case "--++00":
                    byteBinary = (byte) 0b10011101;
                    break;
                case "--+0+0":
                    byteBinary = (byte) 0b10011110;
                    break;
                case "--+00+":
                    byteBinary = (byte) 0b10011111;
                    break;
                case "-++0-0":
                    byteBinary = (byte) 0b10100000;
                    break;
                case "+-+-00":
                    byteBinary = (byte) 0b10100001;
                    break;
                case "+-+0-0":
                    byteBinary = (byte) 0b10100010;
                    break;
                case "+-+00-":
                    byteBinary = (byte) 0b10100011;
                    break;
                case "-++00-":
                    byteBinary = (byte) 0b10100100;
                    break;
                case "++--00":
                    byteBinary = (byte) 0b10100101;
                    break;
                case "++-0-0":
                    byteBinary = (byte) 0b10100110;
                    break;
                case "++-00-":
                    byteBinary = (byte) 0b10100111;
                    break;
                case "-++-+-":
                    byteBinary = (byte) 0b10101000;
                    break;
                case "+-++--":
                    byteBinary = (byte) 0b10101001;
                    break;
                case "+-+-+-":
                    byteBinary = (byte) 0b10101010;
                    break;
                case "+-+--+":
                    byteBinary = (byte) 0b10101011;
                    break;
                case "-++--+":
                    byteBinary = (byte) 0b10101100;
                    break;
                case "++-+--":
                    byteBinary = (byte) 0b10101101;
                    break;
                case "++--+-":
                    byteBinary = (byte) 0b10101110;
                    break;
                case "++---+":
                    byteBinary = (byte) 0b10101111;
                    break;
                case "+000-0":
                    byteBinary = (byte) 0b10110000;
                    break;
                case "0+0-00":
                    byteBinary = (byte) 0b10110001;
                    break;
                case "0+00-0":
                    byteBinary = (byte) 0b10110010;
                    break;
                case "0+000-":
                    byteBinary = (byte) 0b10110011;
                    break;
                case "-0000-":
                    byteBinary = (byte) 0b10110100;
                    break;
                case "00+-00":
                    byteBinary = (byte) 0b10110101;
                    break;
                case "00+0-0":
                    byteBinary = (byte) 0b10110110;
                    break;
                case "00+00-":
                    byteBinary = (byte) 0b10110111;
                    break;
                case "+00-+-":
                    byteBinary = (byte) 0b10111000;
                    break;
                case "0+0+--":
                    byteBinary = (byte) 0b10111001;
                    break;
                case "0+0-+-":
                    byteBinary = (byte) 0b10111010;
                    break;
                case "0+0--+":
                    byteBinary = (byte) 0b10111011;
                    break;
                case "+00--+":
                    byteBinary = (byte) 0b10111100;
                    break;
                case "00++--":
                    byteBinary = (byte) 0b10111101;
                    break;
                case "00+-+-":
                    byteBinary = (byte) 0b10111110;
                    break;
                case "00+--+":
                    byteBinary = (byte) 0b10111111;
                    break;
                case "-+0+-+":
                    byteBinary = (byte) 0b11000000;
                    break;
                case "0-+-++":
                    byteBinary = (byte) 0b11000001;
                    break;
                case "0-++-+":
                    byteBinary = (byte) 0b11000010;
                    break;
                case "0-+++-":
                    byteBinary = (byte) 0b11000011;
                    break;
                case "-+0++-":
                    byteBinary = (byte) 0b11000100;
                    break;
                case "+0--++":
                    byteBinary = (byte) 0b11000101;
                    break;
                case "+0-+-+":
                    byteBinary = (byte) 0b11000110;
                    break;
                case "+0-++-":
                    byteBinary = (byte) 0b11000111;
                    break;
                case "-+00+0":
                    byteBinary = (byte) 0b11001000;
                    break;
                case "0-++00":
                    byteBinary = (byte) 0b11001001;
                    break;
                case "0-+0+0":
                    byteBinary = (byte) 0b11001010;
                    break;
                case "0-+00+":
                    byteBinary = (byte) 0b11001011;
                    break;
                case "-+000+":
                    byteBinary = (byte) 0b11001100;
                    break;
                case "+0-+00":
                    byteBinary = (byte) 0b11001101;
                    break;
                case "+0-0+0":
                    byteBinary = (byte) 0b11001110;
                    break;
                case "+0-00+":
                    byteBinary = (byte) 0b11001111;
                    break;
                case "+-0+-+":
                    byteBinary = (byte) 0b11010000;
                    break;
                case "0+--++":
                    byteBinary = (byte) 0b11010001;
                    break;
                case "0+-+-+":
                    byteBinary = (byte) 0b11010010;
                    break;
                case "0+-++-":
                    byteBinary = (byte) 0b11010011;
                    break;
                case "+-0++-":
                    byteBinary = (byte) 0b11010100;
                    break;
                case "-0+-++":
                    byteBinary = (byte) 0b11010101;
                    break;
                case "-0++-+":
                    byteBinary = (byte) 0b11010110;
                    break;
                case "-0+++-":
                    byteBinary = (byte) 0b11010111;
                    break;
                case "+-00+0":
                    byteBinary = (byte) 0b11011000;
                    break;
                case "0+-+00":
                    byteBinary = (byte) 0b11011001;
                    break;
                case "0+-0+0":
                    byteBinary = (byte) 0b11011010;
                    break;
                case "0+-00+":
                    byteBinary = (byte) 0b11011011;
                    break;
                case "+-000+":
                    byteBinary = (byte) 0b11011100;
                    break;
                case "-0++00":
                    byteBinary = (byte) 0b11011101;
                    break;
                case "-0+0+0":
                    byteBinary = (byte) 0b11011110;
                    break;
                case "-0+00+":
                    byteBinary = (byte) 0b11011111;
                    break;
                case "-++0-+":
                    byteBinary = (byte) 0b11100000;
                    break;
                case "+-+-+0":
                    byteBinary = (byte) 0b11100001;
                    break;
                case "+-+0-+":
                    byteBinary = (byte) 0b11100010;
                    break;
                case "+-++0-":
                    byteBinary = (byte) 0b11100011;
                    break;
                case "-+++0-":
                    byteBinary = (byte) 0b11100100;
                    break;
                case "++--+0":
                    byteBinary = (byte) 0b11100101;
                    break;
                case "++-0-+":
                    byteBinary = (byte) 0b11100110;
                    break;
                case "++-+0-":
                    byteBinary = (byte) 0b11100111;
                    break;
                case "-++0+-":
                    byteBinary = (byte) 0b11101000;
                    break;
                case "+-++-0":
                    byteBinary = (byte) 0b11101001;
                    break;
                case "+-+0+-":
                    byteBinary = (byte) 0b11101010;
                    break;
                case "+-+-0+":
                    byteBinary = (byte) 0b11101011;
                    break;
                case "-++-0+":
                    byteBinary = (byte) 0b11101100;
                    break;
                case "++-+-0":
                    byteBinary = (byte) 0b11101101;
                    break;
                case "++-0+-":
                    byteBinary = (byte) 0b11101110;
                    break;
                case "++--0+":
                    byteBinary = (byte) 0b11101111;
                    break;
                case "+000-+":
                    byteBinary = (byte) 0b11110000;
                    break;
                case "0+0-+0":
                    byteBinary = (byte) 0b11110001;
                    break;
                case "0+00-+":
                    byteBinary = (byte) 0b11110010;
                    break;
                case "0+0+0-":
                    byteBinary = (byte) 0b11110011;
                    break;
                case "+00+0-":
                    byteBinary = (byte) 0b11110100;
                    break;
                case "00+-+0":
                    byteBinary = (byte) 0b11110101;
                    break;
                case "00+0-+":
                    byteBinary = (byte) 0b11110110;
                    break;
                case "00++0-":
                    byteBinary = (byte) 0b11110111;
                    break;
                case "+000+-":
                    byteBinary = (byte) 0b11111000;
                    break;
                case "0+0+-0":
                    byteBinary = (byte) 0b11111001;
                    break;
                case "0+00+-":
                    byteBinary = (byte) 0b11111010;
                    break;
                case "0+0-0+":
                    byteBinary = (byte) 0b11111011;
                    break;
                case "+00-0+":
                    byteBinary = (byte) 0b11111100;
                    break;
                case "00++-0":
                    byteBinary = (byte) 0b11111101;
                    break;
                case "00+0+-":
                    byteBinary = (byte) 0b11111110;
                    break;
                case "00+-0+":
                    byteBinary = (byte) 0b11111111;
                    break;

                default:
                    byteBinary = 0b00100000;   //espaco

                    ///codigos para debug abaixo
                    System.out.println("Não entendi o codigo |" + codedByteFixed + "|");
                    if (codedByteFixed.equals("+0+-00")) {
                        System.out.println("é letra a");
                    } else {
                        System.out.println(codedByteFixed + " e " + "+0+-00" + " são " + codedByteFixed.compareTo("+0+-00"));
                    }
                    System.out.print("recebido: ");
                    for (byte b : codedByteFixed.getBytes("cp437")) {
                        System.out.println(Integer.toBinaryString(b));
                    }
                    System.out.println("letra a : ");
                    for (byte b : "+0+-00".getBytes("cp437")) {
                        System.out.println(Integer.toBinaryString(b));
                    }
                ///
            }

            emBytesSteam.write(byteBinary);

        }
        emBytes = emBytesSteam.toByteArray();
        String bin = "";
        for (byte b : emBytes) {
            bin += Integer.toBinaryString(b);
        }
        binarioP.setText(bin);

        descodificada += new String(emBytes, "cp437");

        System.out.println(">descodificado " + descodificada);
        originalP.setText(descodificada);
        return descodificada;
    }

    // -- fim das minhas funcoes ----------------------------------------------

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea binarioP;
    private javax.swing.JButton buttonEnviarMsg;
    private javax.swing.JButton buttonLigarServidor;
    private javax.swing.JButton buttonSetDestination;
    private javax.swing.JTextArea codigoP;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField labelServerPort;
    private javax.swing.JLabel myIplabel;
    private javax.swing.JTextArea originalP;
    private javax.swing.JTextArea textAreaMsgtoSend;
    private javax.swing.JTextPane textRcvd;
    // End of variables declaration//GEN-END:variables

}
